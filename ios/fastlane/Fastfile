# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

APPLE_API_KEY_ID = ENV["APPLE_API_KEY_ID"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_API_KEY_CONTENT = ENV["APPLE_API_KEY_CONTENT"]

XCODE_PROJECT = "Runner.xcodeproj"
APP_IDENTIFIER = "com.mycarehub.mycarehubdemo"
MATCH_TYPE = "appstore"
DEV_SCHEME = "dev"
DEMO_SCHEME = "demo"
PROD_SCHEME = "prod"

CHANGE_LOG = "Welcome to myCareHub. We update the app as often as possible to make it faster and more reliable for you. This update includes bug fixes and improvements."

APPLE_APP_ID = "6443967722"

platform :ios do

  before_all do
    ENV["FASTLANE_ITUNES_TRANSPORTER_USE_SHELL_SCRIPT"]="1"
    ENV["FASTLANE_ITUNES_TRANSPORTER_PATH"]="/Applications/Transporter.app/Contents/itms"
    setup_travis
  end

  desc :"Code Signing Demo Build for TestFlight"
  lane :demo do 
    match(
      type: MATCH_TYPE,
      app_identifier: APP_IDENTIFIER,
      readonly: true
    )

    # App Store Connect API token to authenticate Apple ID
    api_key = app_store_connect_api_key(
      key_id: "#{ENV["APPLE_API_KEY_ID"]}",
      issuer_id: "#{ENV["APPLE_ISSUER_ID"]}",
      key_content: "#{ENV["APPLE_API_KEY_CONTENT"]}",
    )

    # Authenticate and increament build number
    increment_build_number(
      build_number: latest_testflight_build_number(
        api_key: api_key) + 1,
      xcodeproj: XCODE_PROJECT
    )

    if is_ci
      clear_derived_data
    cocoapods(
      clean_install: true,
    )
    end
    
    if is_ci
      update_code_signing_settings(
        use_automatic_signing: false,
        path: XCODE_PROJECT,
    )
    end

    build_app(
      scheme: DEMO_SCHEME,
      export_options: {
        method: MATCH_TYPE,
      }
    )

    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      apple_id: APPLE_APP_ID,
      distribute_external: true,
      changelog: CHANGE_LOG,
    )
  end
end