import 'dart:io';

import 'package:afya_moja_core/afya_moja_core.dart';
import 'package:async_redux/async_redux.dart';
import 'package:flutter/services.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:http/http.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pro_health_360/application/redux/states/app_state.dart';
import 'package:pro_health_360/presentation/content/widgets/document_content_widget.dart';

import '../../../../mocks.dart';
import '../../../../test_helpers.dart';

void main() {
  group('DocumentContentWidget', () {
    late Store<AppState> store;

    setUp(() {
      store = Store<AppState>(initialState: AppState.initial());
    });

    testWidgets('shows loading indicator while loading the pdf',
        (WidgetTester tester) async {
      final MockGraphQlClient mockGraphQlClient = MockGraphQlClient();

      await buildTestWidget(
        tester: tester,
        store: store,
        client: mockGraphQlClient,
        widget: const DocumentContentPage(
          pdfTitle: 'Test',
          pdfUrl: 'testUrl',
        ),
      );

      expect(find.byType(PlatformLoader), findsOneWidget);
    });

    testWidgets('renders pdf', (WidgetTester tester) async {
      final String dir = Directory.current.path;
      final File pdfMockFile = File('$dir/test/tests_resources/test.pdf');
      final Uint8List pdfAsBytes = pdfMockFile.readAsBytesSync();
      pdfMockFile.writeAsBytesSync(pdfAsBytes, flush: true);

      final MockShortGraphQlClient mockGraphQlClient =
          MockShortGraphQlClient.withResponse(
        'idToken',
        'endpoint',
        Response(
          pdfMockFile.readAsStringSync(),
          201,
          headers: <String, String>{
            'Content-Type': 'application/pdf',
          },
        ),
      );

      const MethodChannel channel =
          MethodChannel('plugins.flutter.io/path_provider');
      channel.setMockMethodCallHandler((MethodCall methodCall) async {
        return '.';
      });

      await buildTestWidget(
        tester: tester,
        store: store,
        client: mockGraphQlClient,
        widget: const DocumentContentPage(
          pdfTitle: 'Test',
          pdfUrl: 'testUrl.pdf',
        ),
      );
      await tester.pump(const Duration(minutes: 5));

      expect(find.byType(PlatformLoader), findsNothing);

      ///delete auto generated file for the test
      final Directory docsDirectory = await getApplicationDocumentsDirectory();
      final File autoGeneratedFile = File('${docsDirectory.path}/testUrl.pdf');
      autoGeneratedFile.deleteSync();
    });
  });
}
