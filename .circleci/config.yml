version: 2.1

commands:
  install_packages:
    description: "Install flutter to latest version and install dependencies"
    steps:
      - checkout
      - run :
          name: Install flutter
          command: bash install_flutter_ci.sh
      - save_cache:
          key: flutter_root_and_dependencies_cache_v1
          paths:
            - $CIRCLE_WORKING_DIRECTORY/.dart_tool/
            - $CIRCLE_WORKING_DIRECTORY/.flutter-plugins
            - $CIRCLE_WORKING_DIRECTORY/.flutter-plugins-dependencies
            - $CIRCLE_WORKING_DIRECTORY/.packages
            - $CIRCLE_WORKING_DIRECTORY/.pub-cache/
            - $CIRCLE_WORKING_DIRECTORY/.pub/
            - $CIRCLE_WORKING_DIRECTORY/.pub/

  download_and_setup_keystore:
    description: "Setup service account and download keystore"
    steps:
      - run:
          name: Setup service account
          command: |
            echo $GCLOUD_SERVICE_ACCOUNT_KEY_FILE > service.json
            gcloud auth activate-service-account --key-file=service.json
            gcloud config set project $GCLOUD_PROJECT_ID
            gcloud config list
            gsutil cp gs://sghi-android-keys-box/afyamoja_keystore.jks.encrypted .
            gsutil cp gs://sghi-android-keys-box/secrets.xml $HOME/project/android/app/src/main/res/values/secrets.xml
            gcloud kms decrypt --location europe-west3 --keyring android-keys --key android-crypto-key \
            --ciphertext-file afyamoja_keystore.jks.encrypted \
            --plaintext-file afyamoja_keystore.jks
      - run:
          name: Generate key properties file
          command: |
            echo "storePassword=$KEY_STORE_PWD" | tee -a android/key.properties
            echo "keyPassword=$KEY_STORE_PWD" | tee -a android/key.properties
            echo "keyAlias=$KEY_STORE_ALIAS" | tee -a android/key.properties
            echo "storeFile=$HOME/project/afyamoja_keystore.jks" | tee -a android/key.properties
      - save_cache:
          key: keystore_and_properties_cache
          paths:
            - $CIRCLE_WORKING_DIRECTORY/android/android/key.properties
            - $CIRCLE_WORKING_DIRECTORY/afyamoja_keystore.jks
            - $CIRCLE_WORKING_DIRECTORY/service.json
            - $CIRCLE_WORKING_DIRECTORY/android/app/src/main/res/values/secrets.xml


  setup_env_vars:
    description: "Setup required directories and load config files"
    steps:
      - run:
          name: "Load Sentry DNS and google services file"
          command: |
            mkdir -p dump/
            echo $ENCODED_APP_ENV | base64 --decode > .env
            echo $GOOGLE_SERVICES_FILE > android/app/google-services.json
      - run:
          name: "Setup flutter environment variable"
          command: |
            echo 'export PATH=/home/circleci/flutter/bin:$PATH' >> $BASH_ENV

jobs:
  run_tests_and_generate_coverage:
    resource_class: xlarge
    docker:
      - image: cimg/android:2022.03.1-ndk
    steps:
      - install_packages
      - run:
          name: "Setup flutter environment variable"
          command: |
             echo 'export PATH=/home/circleci/flutter/bin:$PATH' >> $BASH_ENV
      - restore_cache:
          keys:
            - flutter_root_and_dependencies_cache_v1
      - run:
         name: Analyze, test and report coverage
         no_output_timeout: 15m
         command: |
            flutter clean
            flutter pub get
            flutter analyze
            flutter test --coverage test/
            sudo apt-get -qq update
            sudo apt-get install -qqy lcov python3-pip
            pip3 install -Uqqq lxml && pip3 install -Uqqq beautifulsoup4
            lcov --remove coverage/lcov.info 'lib/*.g.dart' -o coverage/lcov.info
            lcov --remove coverage/lcov.info 'lib/**/*.freezed.dart' -o coverage/lcov.info
            lcov --remove coverage/lcov.info 'lib/**/*.gr.dart' -o coverage/lcov.info
            lcov --remove coverage/lcov.info 'lib/infrastructure/repository/sqlite.dart' -o coverage/lcov.info
            lcov --remove coverage/lcov.info 'lib/application/core/services/notifications_utils.dart' -o coverage/lcov.info
            lcov --remove coverage/lcov.info 'lib/presentation/core/widgets/preload_app.dart' -o coverage/lcov.info
            lcov --remove coverage/lcov.info 'lib/presentation/communities/*.dart' -o coverage/lcov.info
            lcov --remove coverage/lcov.info 'lib/presentation/core/widgets/app_entry_point.dart' -o coverage/lcov.info
            lcov --remove coverage/lcov.info 'lib/infrastructure/connectivity/*.dart' -o coverage/lcov.info
            genhtml -q -o coverage coverage/lcov.info
            python3 check_coverage.py
      - store_artifacts:
          path: coverage/


  deploy_to_internal_firebase_app_tester:
    resource_class: xlarge
    docker:
      - image: cimg/android:2022.03.1-ndk
    steps:
      - install_packages
      - download_and_setup_keystore
      - setup_env_vars
      - restore_cache:
          keys:
            - flutter_root_and_dependencies_cache_v1
            - keystore_and_properties_cache

      - run:
          name: "Build and publish to firebase app distribution"
          command: |
            flutter build apk --release --build-number $CIRCLE_BUILD_NUM --build-name=$BUILD_VERSION_ROOT.$CIRCLE_BUILD_NUM-multitenant --dart-define=APPVERSION=$BUILD_VERSION_ROOT.$CIRCLE_BUILD_NUM-multitenant
            BUNDLE_FILE_PATH=$HOME/project/build/app/outputs/flutter-apk/app-release.apk
            firebase appdistribution:distribute $BUNDLE_FILE_PATH --app $MULTITENANT_FIREBASE_APP_ID --groups "internal-testers" --token $FIREBASE_TOKEN --release-notes-file $HOME/project/release-notes.txt


  deploy_to_play_store_alpha:
    resource_class: xlarge
    docker:
      - image: cimg/android:2022.03.1-ndk
    steps:
      - install_packages
      - download_and_setup_keystore
      - setup_env_vars
      - restore_cache:
          keys:
            - flutter_root_and_dependencies_cache_v1
            - keystore_and_properties_cache
      - run:
          name: "Build and publish to play store alpha track"
          command: |
            # First deploy to firebase app tester with the -alpha suffix for QA
            flutter build apk --release --target=$HOME/project/lib/bin/main_demo.dart  --build-number $CIRCLE_BUILD_NUM --build-name=$BUILD_VERSION_ROOT.$CIRCLE_BUILD_NUM-alpha --dart-define=APPVERSION=$BUILD_VERSION_ROOT.$CIRCLE_BUILD_NUM-alpha
            BUNDLE_FILE_PATH=$HOME/project/build/app/outputs/flutter-apk/app-release.apk
            firebase appdistribution:distribute $BUNDLE_FILE_PATH --app $MULTITENANT_FIREBASE_APP_ID --groups "internal-testers" --token $FIREBASE_TOKEN --release-notes-file $HOME/project/demo-release-notes.txt

            # Build and deploy to play store
            flutter build appbundle --build-number $CIRCLE_BUILD_NUM --build-name=$BUILD_VERSION_ROOT.$CIRCLE_BUILD_NUM-alpha \
            --obfuscate --split-debug-info=$HOME/project/dump --release --target=$HOME/project/lib/bin/main_demo.dart \
            --dart-define=APPVERSION=$BUILD_VERSION_ROOT.$CIRCLE_BUILD_NUM-alpha
            gsutil cp gs://sghi-fls-android-box/fls-android.zip .
            mkdir $HOME/fls/
            unzip -x fls-android.zip -d $HOME/fls/
            export PATH=PATH="$PATH:/$HOME/fls/"
            BUNDLE_FILE_PATH=$HOME/project/build/app/outputs/bundle/release/app-release.aab
            echo $GPLAY_PUBLISHER_ACCOUNT > pub_service.json
            fls-android track --build-number=$CIRCLE_BUILD_NUM --package-name=$PACKAGE_NAME --bundle-path=$BUNDLE_FILE_PATH --track-name=alpha --service-account-path=$HOME/project/pub_service.json --release-name=$BUILD_VERSION_ROOT.$CIRCLE_BUILD_NUM-alpha
            echo "Build with number $BUILD_VERSION_ROOT.$CIRCLE_BUILD_NUM-alpha has been deployed successfully"


  deploy_to_play_store_beta:
    resource_class: xlarge
    docker:
      - image: cimg/android:2022.03.1-ndk
    steps:
      - install_packages
      - download_and_setup_keystore
      - setup_env_vars
      - restore_cache:
          keys:
            - flutter_root_and_dependencies_cache_v1
            - keystore_and_properties_cache
      - run:
          name: "Build and publish to play store beta track"
          command: |
            flutter build appbundle --build-number $CIRCLE_BUILD_NUM --build-name=$BUILD_VERSION_ROOT.$CIRCLE_BUILD_NUM-beta \
            --obfuscate --split-debug-info=$HOME/project/dump --release --target=$HOME/project/lib/bin/main_demo.dart \
            --dart-define=APPVERSION=$BUILD_VERSION_ROOT.$CIRCLE_BUILD_NUM-beta
            gsutil cp gs://sghi-fls-android-box/fls-android.zip .
            mkdir $HOME/fls/
            unzip -x fls-android.zip -d $HOME/fls/
            export PATH=PATH="$PATH:/$HOME/fls/"
            BUNDLE_FILE_PATH=$HOME/project/build/app/outputs/bundle/release/app-release.aab
            echo $GPLAY_PUBLISHER_ACCOUNT > pub_service.json
            fls-android track --build-number=$CIRCLE_BUILD_NUM --package-name=$PACKAGE_NAME --bundle-path=$BUNDLE_FILE_PATH --track-name=beta --service-account-path=$HOME/project/pub_service.json --release-name=$BUILD_VERSION_ROOT.$CIRCLE_BUILD_NUM-beta
            echo "Build with number $BUILD_VERSION_ROOT.$CIRCLE_BUILD_NUM-beta has been deployed successfully"


  deploy_to_play_store_prod:
    resource_class: xlarge
    docker:
      - image: cimg/android:2022.03.1-ndk
    steps:
      - install_packages
      - download_and_setup_keystore
      - setup_env_vars
      - restore_cache:
          keys:
            - flutter_root_and_dependencies_cache_v1
            - keystore_and_properties_cache
      - run:
          name: "Build and publish to play store prod track"
          command: |
            flutter build appbundle --build-number $CIRCLE_BUILD_NUM --build-name=$BUILD_VERSION_ROOT.$CIRCLE_BUILD_NUM-prod \
            --obfuscate --split-debug-info=$HOME/project/dump --release --target=$HOME/project/lib/bin/main_prod.dart \
            --dart-define=APPVERSION=$BUILD_VERSION_ROOT.$CIRCLE_BUILD_NUM-prod
            gsutil cp gs://sghi-fls-android-box/fls-android.zip .
            mkdir $HOME/fls/
            unzip -x fls-android.zip -d $HOME/fls/
            export PATH=PATH="$PATH:/$HOME/fls/"
            BUNDLE_FILE_PATH=$HOME/project/build/app/outputs/bundle/release/app-release.aab
            echo $GPLAY_PUBLISHER_ACCOUNT > pub_service.json
            fls-android track --build-number=$CIRCLE_BUILD_NUM --package-name=$PACKAGE_NAME --bundle-path=$BUNDLE_FILE_PATH --track-name=production --service-account-path=$HOME/project/pub_service.json --release-name=$BUILD_VERSION_ROOT.$CIRCLE_BUILD_NUM-prod
            echo "Build with number $BUILD_VERSION_ROOT.$CIRCLE_BUILD_NUM-prod has been deployed successfully"

workflows:
  version: 2
  test_and_deploy:
   jobs:
     - run_tests_and_generate_coverage
     - deploy_to_internal_firebase_app_tester:
         requires:
           - run_tests_and_generate_coverage
         filters:
           branches:
             only:
               - mycarehub
     - deploy_to_play_store_alpha:
         requires:
           - run_tests_and_generate_coverage
         filters:
           branches:
             only:
               -mycarehub-alpha
     - deploy_to_play_store_beta:
         requires:
           - run_tests_and_generate_coverage
         filters:
           branches:
             only:
               - mycarehub-beta
     - deploy_to_play_store_prod:
         requires:
           - run_tests_and_generate_coverage
         filters:
           branches:
             only:
               - mycarehub-prod
